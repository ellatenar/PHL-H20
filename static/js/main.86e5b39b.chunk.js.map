{"version":3,"sources":["Watersheds.js","InfoBox.js","Hydrography.js","App.js","reportWebVitals.js","index.js"],"names":["Watersheds","data","GeoJSON","onEachFeature","feature","layer","properties","ACRES","SQ_MILES","WATERSHED_NAME","popUpText","toFixed","bindPopup","style","weight","color","InfoBox","open","classProp","className","href","Hydrography","CREEK_NAME","WATERSHED","SUBSHED","App","useState","info","setInfo","opacity","setOpacity","hydroData","features","map","f","replace","Helmet","charSet","rel","integrity","crossorigin","src","onClick","s","type","min","max","step","defaultValue","onChange","e","target","value","MapContainer","center","zoom","scrollWheelZoom","zoomControl","id","TileLayer","attribution","url","LayersControl","position","Overlay","checked","name","watershedData","ZoomControl","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iuxrxBAwBeA,EArBI,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAkBpB,OAAO,cAACC,EAAA,EAAD,CAASD,KAAMA,EAAME,cAjBN,SAACC,EAASC,GAC9B,MAA4CD,EAAQE,WAA5CC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,SAAUC,EAAzB,EAAyBA,eAEnBC,EAAS,2CACLD,EADK,iDAEcD,EAASG,QAAQ,GAF/B,oEAGcJ,EAAMI,QAAQ,GAH5B,8BAMfN,EAAMO,UAAUF,IAQwCG,MAL5C,SAACT,GAAD,MAAc,CAC1BU,OAAQ,EACRC,MAAO,eCgCIC,EAhDC,SAAC,GAAwB,EAAtBC,KAAuB,IAAjBC,EAAgB,EAAhBA,UACvB,OACE,sBAAKC,UAAW,YAAcD,EAA9B,UACE,+OAGuE,IACrE,mBAAGE,KAAK,+HAAR,gDAJF,2TAW+B,IAC7B,mBAAGA,KAAK,kHAAR,mBAEK,IAdP,KAeK,IACH,mBAAGA,KAAK,+GAAR,qBAhBF,+GAsBA,qJAE8C,IAC5C,mBAAGA,KAAK,+BAAR,sDAHF,4BAM4B,IAC1B,mBAAGA,KAAK,iCAAR,+CAPF,OAYA,sDACwB,IACtB,mBAAGA,KAAK,kCAAR,+BAEF,gDACiB,mBAAGA,KAAK,+BAAR,+B,gBCrBRC,EApBK,SAAC,GAAc,IAAZpB,EAAW,EAAXA,KAiBrB,OAAO,cAACC,EAAA,EAAD,CAASD,KAAMA,EAAME,cAhBN,SAACC,EAASC,GAC9B,MAA2CD,EAAQE,WAA3CgB,EAAR,EAAQA,WAAYC,EAApB,EAAoBA,UAAWC,EAA/B,EAA+BA,QAEzBd,EAAS,2CACLY,EADK,qEAEkCC,GAAa,MAF/C,2BAGTC,EAAO,0CAAsCA,EAAtC,UAAwD,GAHtD,kBAMfnB,EAAMO,UAAUF,IAOwCG,MAJ5C,SAACT,GAAD,MAAc,CAC1BU,OAAQ,OCkGGW,MApGf,WACE,IACA,EAAwBC,oBAAS,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA8BF,mBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KAiBA,OAXAC,EAAUC,SAAWD,EAAUC,SAASC,KAAI,SAACC,GAAD,yBAAC,eACxCA,GADuC,IAE1C5B,WAAW,2BACN4B,EAAE5B,YADG,IAERgB,WAAU,UAAEY,EAAE5B,WAAWgB,kBAAf,aAAE,EAAyBa,QACnC,sBACA,oBAMJ,sBAAKhB,UAAU,MAAf,UACE,eAACiB,EAAA,EAAD,WACE,sBAAMC,QAAQ,UACd,4CACA,sBACEC,IAAI,aACJlB,KAAK,mDACLmB,UAAU,kGACVC,YAAY,KAEd,wBACEC,IAAI,kDACJF,UAAU,kGACVC,YAAY,QAIhB,yBAAQrB,UAAU,aAAlB,UACE,qBAAKA,UAAU,YAAYuB,QAnClB,WACbd,GAAQ,SAACe,GAAD,OAAQA,MAkCZ,0BAGA,oBAAGxB,UAAU,QAAb,gBACM,IACJ,uBAAMA,UAAU,OAAhB,cACG,oCADH,UAIF,mFACA,sBAAKA,UAAU,SAAf,UACE,yCACA,uBACEyB,KAAK,QACLC,IAAK,EACLC,IAAK,EACLC,KAAK,MACLC,aAAcnB,EACdoB,SAAU,SAACC,GAAD,OAAOpB,GAAYoB,EAAEC,OAAOC,QACtCjC,UAAU,gBAEZ,oDAGHQ,GAAQ,cAAC,EAAD,CAASV,KAAMU,EAAMT,UAAWS,EAAO,UAAY,KAE5D,eAAC0B,EAAA,EAAD,CACEC,OAjES,CAAC,WAAY,WAkEtBC,KAAM,GACNC,iBAAiB,EACjBC,aAAa,EACbC,GAAG,SALL,UAOE,cAACC,EAAA,EAAD,CACEC,YAAY,yEACZC,IAAI,qDACJhC,QAAS,EAAIA,IAEf,cAAC8B,EAAA,EAAD,CACEE,IAAI,gGACJD,YAAY,6IACZ/B,QAASA,IAfb,KAkBE,eAACiC,EAAA,EAAD,CAAeC,SAAS,WAAxB,UACE,cAACD,EAAA,EAAcE,QAAf,CAAuBC,SAAO,EAACC,KAAK,gCAApC,SACE,cAAC,EAAD,CAAYjE,KAAMkE,MAEpB,cAACL,EAAA,EAAcE,QAAf,CACEC,SAAO,EACPC,KAAK,0DAFP,SAIE,cAAC,EAAD,CAAajE,KAAM8B,SAGvB,cAACqC,EAAA,EAAD,CAAaL,SAAS,uBCjGfM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.86e5b39b.chunk.js","sourcesContent":["import React from \"react\";\nimport { GeoJSON } from \"react-leaflet\";\n\nconst Watersheds = ({ data }) => {\n  const onEachFeature = (feature, layer) => {\n    const { ACRES, SQ_MILES, WATERSHED_NAME } = feature.properties;\n\n    const popUpText = `<div class=\"popup\">\n        <h2>${WATERSHED_NAME}</h2>\n        <div class=\"popupdata\">${SQ_MILES.toFixed(2)} miles<sup>2</sup></div>\n        <div class=\"popupdata\">${ACRES.toFixed(2)} acres</div>\n      </div>`;\n\n    layer.bindPopup(popUpText);\n  };\n\n  const style = (feature) => ({\n    weight: 4,\n    color: \"#0000ea\",\n  });\n\n  return <GeoJSON data={data} onEachFeature={onEachFeature} style={style} />;\n};\n\nexport default Watersheds;\n","import React from \"react\";\n\nconst InfoBox = ({ open, classProp }) => {\n  return (\n    <div className={\"info-box \" + classProp}>\n      <p>\n        This project was inspired by a desire to connect people to the aqueous\n        flows weaving together our lives across histories and enabling our\n        collective wellbeing. In Philadelphia, a territory colonized through{\" \"}\n        <a href=\"https://hiddencityphila.org/2019/08/philadelphias-forgotten-forebears-how-pennsylvania-erased-the-lenape-from-local-history/\">\n          deception and forced expropriation\n        </a>\n        , our rivers have shaped the character of the city, and yet, like the\n        communities who have stewarded this land before us, much is wagered on\n        us not paying them any mind. Water is the great connector; her cycles\n        implicate us all in mutually assured flourishing or destruction. Whether\n        it's European viral strains,{\" \"}\n        <a href=\"https://www.phillyvoice.com/philadelphia-water-contaminated-chemicals-pfas-environmental-working-group-reports/\">\n          PFAs,\n        </a>{\" \"}\n        or{\" \"}\n        <a href=\"https://www.ecowatch.com/pennsylvania-fracking-water-contamination-much-higher-than-reported-1882166816.html\">\n          methane\n        </a>\n        , the chemical byproducts of capital's self-valorization will always\n        make their way into the body public.\n      </p>\n      <p>\n        To support the work being done to preserve the Southern Unami dialect of\n        Lenape spoken in this area, read more about{\" \"}\n        <a href=\"https://www.talk-lenape.org/\">\n          the Lenape Language Preservation Project\n        </a>\n        , or consider donating to{\" \"}\n        <a href=\"https://www.lenape-nation.org/\">\n          the Lenape Nation of Pennsylvania\n        </a>\n        .\n      </p>\n      <p>\n        all mapping data from{\" \"}\n        <a href=\"https://www.opendataphilly.org/\">OpenDataPhilly</a>\n      </p>\n      <p>\n        site design by <a href=\"https://github.com/ellatenar\">Ella Heron</a>\n      </p>\n    </div>\n  );\n};\n\nexport default InfoBox;\n","import React from \"react\";\nimport { GeoJSON } from \"react-leaflet\";\n\nconst Hydrography = ({ data }) => {\n  const onEachFeature = (feature, layer) => {\n    const { CREEK_NAME, WATERSHED, SUBSHED } = feature.properties;\n\n    const popUpText = `<div class=\"popup\">\n        <h2>${CREEK_NAME}</h2>\n        <div class=\"popupdata\">Regional watershed: ${WATERSHED || \"n/a\"}</div>\n        ${SUBSHED ? `<div class=\"popupdata\">Subshed: ${SUBSHED}</div>` : \"\"}\n      </div>`;\n\n    layer.bindPopup(popUpText);\n  };\n\n  const style = (feature) => ({\n    weight: 3,\n  });\n\n  return <GeoJSON data={data} onEachFeature={onEachFeature} style={style} />;\n};\n\nexport default Hydrography;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { Helmet } from \"react-helmet\";\nimport {\n  MapContainer,\n  TileLayer,\n  ZoomControl,\n  LayersControl,\n} from \"react-leaflet\";\nimport Watersheds from \"./Watersheds\";\nimport InfoBox from \"./InfoBox\";\nimport watershedData from \"./data/Major_Watersheds_Regional.geojson.json\";\nimport hydroData from \"./data/Hydrographic_Features_Poly.geojson.json\";\nimport Hydrography from \"./Hydrography\";\n\nfunction App() {\n  const CENTER = [40.028624, -75.186722];\n  const [info, setInfo] = useState(false);\n  const [opacity, setOpacity] = useState(1);\n  const toggle = () => {\n    setInfo((s) => !s);\n  };\n\n  // Clean up datafile\n  hydroData.features = hydroData.features.map((f) => ({\n    ...f,\n    properties: {\n      ...f.properties,\n      CREEK_NAME: f.properties.CREEK_NAME?.replace(\n        /[tT]rib\\b|[tT]rib\\./,\n        \"tributary\"\n      ),\n    },\n  }));\n\n  return (\n    <div className=\"App\">\n      <Helmet>\n        <meta charSet=\"utf-8\" />\n        <title>PHL H20</title>\n        <link\n          rel=\"stylesheet\"\n          href=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.css\"\n          integrity=\"sha512-xodZBNTC5n17Xt2atTPuE1HxjVMSvLVW9ocqUKLsCC5CXdbqCmblAshOMAS6/keqq/sMZMZ19scR4PsZChSR7A==\"\n          crossorigin=\"\"\n        />\n        <script\n          src=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.js\"\n          integrity=\"sha512-XQoYMqMTK8LvdxXYG3nZ448hOEQiglfqkJs1NOQV44cWnUrBc8PkAOcXy20w0vlaXaVUearIOBhiXZ5V3ynxwA==\"\n          crossorigin=\"\"\n        ></script>\n      </Helmet>\n\n      <header className=\"App-header\">\n        <div className=\"info-drop\" onClick={toggle}>\n          ðŸ’§\n        </div>\n        <p className=\"title\">\n          PHL{\" \"}\n          <span className=\"blue\">\n            H<sub>2</sub>0\n          </span>\n        </p>\n        <p>visualizing the watershed of occupied Lenapehoking</p>\n        <div className=\"slider\">\n          <span>grid </span>\n          <input\n            type=\"range\"\n            min={0}\n            max={1}\n            step=\"any\"\n            defaultValue={opacity}\n            onChange={(e) => setOpacity(+e.target.value)}\n            className=\"layerslider\"\n          />\n          <span> satellite</span>\n        </div>\n      </header>\n      {info && <InfoBox open={info} classProp={info ? \"fade-in\" : \"\"} />}\n\n      <MapContainer\n        center={CENTER}\n        zoom={10}\n        scrollWheelZoom={true}\n        zoomControl={false}\n        id=\"mapDiv\"\n      >\n        <TileLayer\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          opacity={1 - opacity}\n        />\n        <TileLayer\n          url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\"\n          attribution=\"Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community\"\n          opacity={opacity}\n        />\n        );\n        <LayersControl position=\"topright\">\n          <LayersControl.Overlay checked name=\"Regional watershed boundaries\">\n            <Watersheds data={watershedData} />\n          </LayersControl.Overlay>\n          <LayersControl.Overlay\n            checked\n            name=\"Rivers, streams, and creeks&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"\n          >\n            <Hydrography data={hydroData} />\n          </LayersControl.Overlay>\n        </LayersControl>\n        <ZoomControl position=\"bottomright\" />\n      </MapContainer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './stylesheets/index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}